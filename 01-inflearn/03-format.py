# 문자열을 형식화하는 두가지 방법
# 1. % 기호를 사용한 방식
# 2. format() 함수를 사용한 방식

# ------------------------------------------------------------

# format() 함수를 사용한 방식
# format 함수는 복잡한 문자열을 간단하게 처리하기 위한 메소드이다.
print('{} {} {}'.format(1, 'hello', 3.14))
# 1 hello 3.14

print('{} {} {}'.format(3.14, 1, 'hello'))
# 3.14 1 hello

print('{} {}'.format('one', 'two'))
# one two

# ------------------------------------------------------------

# 인덱스값 참조해서 print할 순서 정하기
print('{1} {0}'.format('one', 'two'))
# two one
# 첫번째 {}이 인덱스 값이 1이므로 one이 두번째 출력된다

# ------------------------------------------------------------

# format() 함수를 사용해 포맷팅하기

# 1) 공백 만들기
# 데이터형을 생략했을때
# 왼쪽부터 공백만들기
print('{:>5}'.format('123'))
#   123
# 왼쪽부터 5칸의 공간을 확보, 2칸의 공백, 3칸의 value값을 놓는 곳

# 오른쪽부터 공백만들기
print('{:5}'.format('123'))
# 123
# 오른쪽부터 5칸의 공간을 확보, 2칸의 공백, 3칸의 value값을 놓는 곳

# 데이터형을 넣어줬을때
# 숫자: 공백의 수, s: string(문자열), d: digit(정수), f: float(실수)
# s: 문자열
print('{:>5s}'.format('123'))
#   123

# d: 정수
print('{:>5d}'.format(123))
#   123

# f: 실수
print('{:>5f}'.format(1.23))
# 1.230000

# ---------------

# 2) 빈공백을 대체할 문자 넣기
print('{:_>5}'.format('123'))
# __123

# ---------------

# 3) 중앙정렬하기
print('{:^5}'.format('123'))
#  123 
# 123 왼쪽에 빈공간 하나, 오른쪽에 빈공간 하나와 함께 value값이 출력된다

# ---------------

# 4) 글자를 넣을 공간 한정하기 (절삭하기)
print('{:>2}'.format('My Name is Python'))
# My Name is Python
# 오른쪽부터 숫자만큼 공백을 만든 후 value를 채워넣기
# value값이 숫자보다 크므로 공백이 생기지 않는다

# 왼쪽부터 공백만들기
print('{:>10.5}'.format('My Name is Python'))
#      My Na     
# 총 10개의 빈공간을 확보 후 5개의 value 값을 넣어주었다
# value값을 넣을 수 있는 공간은 5칸밖에 없으므로 6칸째부터 해당하는 me is Python은 삭제한 후 출력한다

# 오른쪽부터 공백만들기
print('{:10.5}'.format('My Name is Python'))
# My Na     
# 총 10개의 빈공간을 확보 후 5개의 value 값을 넣어주었다
# value값을 넣을 수 있는 공간은 5칸밖에 없으므로 6칸째부터 해당하는 me is Python은 삭제한 후 출력한다

# ---------------

# 5) 소수점자리 제한
print('{:6.2f}'.format(3.14159265359))
#   3.14
# 빈공간 6개, 소수점자리 2개, 오른쪽부터 출력

print('{:06.2f}'.format(3.14159265359))
# 003.14
# 정수 빈부분 0 넣기, 빈공간 6개, 소수점자리 2개, 오른쪽부터 출력
